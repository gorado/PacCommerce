{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": [],
      "authorship_tag": "ABX9TyN8v6rKVEgXzMQZym3uS4N0",
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/gorado/PacCommerce/blob/main/user.py\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "# untuk membuat table\n",
        "from tabulate import tabulate\n",
        "# square root, untuk menghitung euckudean distance\n",
        "import math\n",
        "\n",
        "class User():\n",
        "    data_membership = {\n",
        "        'Sumbul': 'Platinum',\n",
        "        'Ana': 'Gold',\n",
        "        'Cahya': 'Platinum'\n",
        "    }\n",
        "\n",
        "    data_requirement = [\n",
        "        {\n",
        "            \"Membership\": \"Platinum\",\n",
        "            \"Expense\" : 8,\n",
        "            \"Income\" : 15\n",
        "        },\n",
        "        {\n",
        "            \"Membership\": \"Gold\",\n",
        "            \"Expense\" : 6,\n",
        "            \"Income\" : 10\n",
        "        },\n",
        "        {\n",
        "            \"Membership\": \"Silver\",\n",
        "            \"Expense\" : 5,\n",
        "            \"Income\" : 7\n",
        "        }\n",
        "    ]\n",
        "\n",
        "    data_membership = [\n",
        "        {\n",
        "            \"Membership\": \"Platinum\",\n",
        "            \"Discount\": '15%',\n",
        "            \"Another Benefit\": \"Benefit Silver + Gold + Voucher Liburan + Cashback max. 30%\"\n",
        "        },\n",
        "        {\n",
        "            \"Membership\": \"Gold\",\n",
        "            \"Discount\": '10%',\n",
        "            \"Another Benefit\": \"Benefit Silver + Voucher Ojek Online\"\n",
        "        },\n",
        "        {\n",
        "            \"Membership\": \"Silver\",\n",
        "            \"Discount\": '8%',\n",
        "            \"Another Benefit\": \"Voucher Makanan\"\n",
        "        }\n",
        "    ]\n",
        "\n",
        "    headers_requirement = list(x for x in data_requirement[0].keys())\n",
        "    content_requirement = list(list(x.values()) for x in data_requirement)\n",
        "\n",
        "\n",
        "    def __init__(self, username, membership = None):\n",
        "        self.username = username\n",
        "        self.membership = membership\n",
        "\n",
        "\n",
        "    def show_benefit(self):\n",
        "        benefit = [\n",
        "            [\"Platinum\", \"15%\", \"Benefit Gold + Silver + Cashback max. 30%\"],\n",
        "            [\"Gold\", \"10%\", \"Benefit Silver + Voucher Ojek Online\"],\n",
        "            [\"Silver\", \"8%\", \"Voucher Makanan\"],\n",
        "        ]\n",
        "\n",
        "        benefit_headers = [\"Membership\", \"Discount\", \"Another Benefit\"]\n",
        "\n",
        "        print('Paccommerce Membership Benefit')\n",
        "        print(tabulate(benefit, benefit_headers, tablefmt='fancy_grid', stralign='center'))\n",
        "\n",
        "    def show_requirements(self):\n",
        "        \"\"\"\n",
        "        Fungsi ini digunakan untuk mencetak requirement untuk mencapai benefit tier tertentu\n",
        "\n",
        "        input: None\n",
        "        \"\"\"\n",
        "        print(\"Detail requirement based on membership tier\")\n",
        "        print(\"\")\n",
        "        table = tabulate(self.content_requirement, headers=self.headers_requirement,tablefmt='fancy_grid', stralign='center')\n",
        "        print(table)\n",
        "\n",
        "    def predict_membership(self, expense,income):\n",
        "        \"\"\"\n",
        "        Fungsi ini bertujuan untuk predict customer membership tier berdasar their income and expense\n",
        "\n",
        "        input:\n",
        "        - username(str)\n",
        "        - expense(int)\n",
        "        - income(int)\n",
        "        \"\"\"\n",
        "        # self.username = username\n",
        "        self.income = income\n",
        "        self.expense = expense\n",
        "\n",
        "        r = 0\n",
        "        final_result = []\n",
        "        for i in self.__class__.data_requirement:\n",
        "            expense_threshold = i['Expense']\n",
        "            income_threshold = i['Income']\n",
        "            r = ((expense_threshold - self.expense)**2 + (income_threshold - self.income)**2)**0.5\n",
        "\n",
        "            result = {i['Membership']: r}\n",
        "            final_result.append(result)\n",
        "\n",
        "        # self.membership = None\n",
        "\n",
        "        init_val = 100\n",
        "        for i in final_result:\n",
        "            value = list(i.values())[0] # ngambil dari dictionary -- convert ke list (isinya 1 nilai doang) -- kemudian ambil yang ke 0\n",
        "            key = list(i.keys())[0] # ngambil dari dictionary -- convert ke list (isinya 1 nilai doang) -- kemudian ambil yang ke 0\n",
        "            if init_val > value:\n",
        "                self.membership = key\n",
        "                init_val = value\n",
        "            else:\n",
        "                pass\n",
        "\n",
        "        return self.membership\n",
        "\n",
        "    def calculate_price(self, membership, list_harga_barang):\n",
        "        # self.membership = membership\n",
        "        for data in self.__class__.data_membership:\n",
        "            if data['Membership'] == membership:\n",
        "                if type(data['Discount']) == str:\n",
        "                    data['Discount'] = float(data['Discount'].replace(\"%\",\"\")) / 100\n",
        "                total_harga = sum(list_harga_barang) * (1-data['Discount'])\n",
        "\n",
        "        print(total_harga)"
      ],
      "metadata": {
        "id": "X12zuqcJKvrV"
      },
      "execution_count": 12,
      "outputs": []
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "cc3F-MqOB1Jc"
      },
      "execution_count": null,
      "outputs": []
    }
  ]
}